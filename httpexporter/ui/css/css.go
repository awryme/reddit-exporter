// Code generated by github.com/awryme/cssmaker-go (with flag -g) - DO NOT EDIT.

package css

import (
	"io"
	"strings"

	"maragu.dev/gomponents"
)


// setup

type ClassAttr struct {
	classes []string
}

func newClassAttr() *ClassAttr {
	return &ClassAttr{}
}

// Type satisfies [nodeTypeDescriber].
func (a *ClassAttr) Type() gomponents.NodeType {
	return gomponents.AttributeType
}

func (attr *ClassAttr) Render(w io.Writer) error {
	return gomponents.Attr(
		"class",
		strings.Join(attr.classes, " "),
	).Render(w)
}

// components

func (attr *ClassAttr) Absolute() *ClassAttr {
	attr.classes = append(attr.classes, "absolute")
	return attr
}

func Absolute() *ClassAttr {
	return newClassAttr().Absolute()
}

func (attr *ClassAttr) Accent() *ClassAttr {
	attr.classes = append(attr.classes, "accent")
	return attr
}

func Accent() *ClassAttr {
	return newClassAttr().Accent()
}

func (attr *ClassAttr) Active() *ClassAttr {
	attr.classes = append(attr.classes, "active")
	return attr
}

func Active() *ClassAttr {
	return newClassAttr().Active()
}

func (attr *ClassAttr) AlignCenter() *ClassAttr {
	attr.classes = append(attr.classes, "align-center")
	return attr
}

func AlignCenter() *ClassAttr {
	return newClassAttr().AlignCenter()
}

func (attr *ClassAttr) AlignEnd() *ClassAttr {
	attr.classes = append(attr.classes, "align-end")
	return attr
}

func AlignEnd() *ClassAttr {
	return newClassAttr().AlignEnd()
}

func (attr *ClassAttr) AlignStart() *ClassAttr {
	attr.classes = append(attr.classes, "align-start")
	return attr
}

func AlignStart() *ClassAttr {
	return newClassAttr().AlignStart()
}

func (attr *ClassAttr) AlignStretch() *ClassAttr {
	attr.classes = append(attr.classes, "align-stretch")
	return attr
}

func AlignStretch() *ClassAttr {
	return newClassAttr().AlignStretch()
}

func (attr *ClassAttr) Attention() *ClassAttr {
	attr.classes = append(attr.classes, "attention")
	return attr
}

func Attention() *ClassAttr {
	return newClassAttr().Attention()
}

func (attr *ClassAttr) BdAccent() *ClassAttr {
	attr.classes = append(attr.classes, "bd-accent")
	return attr
}

func BdAccent() *ClassAttr {
	return newClassAttr().BdAccent()
}

func (attr *ClassAttr) BdActive() *ClassAttr {
	attr.classes = append(attr.classes, "bd-active")
	return attr
}

func BdActive() *ClassAttr {
	return newClassAttr().BdActive()
}

func (attr *ClassAttr) BdAttention() *ClassAttr {
	attr.classes = append(attr.classes, "bd-attention")
	return attr
}

func BdAttention() *ClassAttr {
	return newClassAttr().BdAttention()
}

func (attr *ClassAttr) BdDanger() *ClassAttr {
	attr.classes = append(attr.classes, "bd-danger")
	return attr
}

func BdDanger() *ClassAttr {
	return newClassAttr().BdDanger()
}

func (attr *ClassAttr) BdDefault() *ClassAttr {
	attr.classes = append(attr.classes, "bd-default")
	return attr
}

func BdDefault() *ClassAttr {
	return newClassAttr().BdDefault()
}

func (attr *ClassAttr) BdMuted() *ClassAttr {
	attr.classes = append(attr.classes, "bd-muted")
	return attr
}

func BdMuted() *ClassAttr {
	return newClassAttr().BdMuted()
}

func (attr *ClassAttr) BdSevere() *ClassAttr {
	attr.classes = append(attr.classes, "bd-severe")
	return attr
}

func BdSevere() *ClassAttr {
	return newClassAttr().BdSevere()
}

func (attr *ClassAttr) BdSuccess() *ClassAttr {
	attr.classes = append(attr.classes, "bd-success")
	return attr
}

func BdSuccess() *ClassAttr {
	return newClassAttr().BdSuccess()
}

func (attr *ClassAttr) BdVariant() *ClassAttr {
	attr.classes = append(attr.classes, "bd-variant")
	return attr
}

func BdVariant() *ClassAttr {
	return newClassAttr().BdVariant()
}

func (attr *ClassAttr) BgAccent() *ClassAttr {
	attr.classes = append(attr.classes, "bg-accent")
	return attr
}

func BgAccent() *ClassAttr {
	return newClassAttr().BgAccent()
}

func (attr *ClassAttr) BgActive() *ClassAttr {
	attr.classes = append(attr.classes, "bg-active")
	return attr
}

func BgActive() *ClassAttr {
	return newClassAttr().BgActive()
}

func (attr *ClassAttr) BgAttention() *ClassAttr {
	attr.classes = append(attr.classes, "bg-attention")
	return attr
}

func BgAttention() *ClassAttr {
	return newClassAttr().BgAttention()
}

func (attr *ClassAttr) BgDanger() *ClassAttr {
	attr.classes = append(attr.classes, "bg-danger")
	return attr
}

func BgDanger() *ClassAttr {
	return newClassAttr().BgDanger()
}

func (attr *ClassAttr) BgDefault() *ClassAttr {
	attr.classes = append(attr.classes, "bg-default")
	return attr
}

func BgDefault() *ClassAttr {
	return newClassAttr().BgDefault()
}

func (attr *ClassAttr) BgMuted() *ClassAttr {
	attr.classes = append(attr.classes, "bg-muted")
	return attr
}

func BgMuted() *ClassAttr {
	return newClassAttr().BgMuted()
}

func (attr *ClassAttr) BgSevere() *ClassAttr {
	attr.classes = append(attr.classes, "bg-severe")
	return attr
}

func BgSevere() *ClassAttr {
	return newClassAttr().BgSevere()
}

func (attr *ClassAttr) BgSuccess() *ClassAttr {
	attr.classes = append(attr.classes, "bg-success")
	return attr
}

func BgSuccess() *ClassAttr {
	return newClassAttr().BgSuccess()
}

func (attr *ClassAttr) BgVariant() *ClassAttr {
	attr.classes = append(attr.classes, "bg-variant")
	return attr
}

func BgVariant() *ClassAttr {
	return newClassAttr().BgVariant()
}

func (attr *ClassAttr) Block() *ClassAttr {
	attr.classes = append(attr.classes, "block")
	return attr
}

func Block() *ClassAttr {
	return newClassAttr().Block()
}

func (attr *ClassAttr) Bold() *ClassAttr {
	attr.classes = append(attr.classes, "bold")
	return attr
}

func Bold() *ClassAttr {
	return newClassAttr().Bold()
}

func (attr *ClassAttr) BorderBox() *ClassAttr {
	attr.classes = append(attr.classes, "border-box")
	return attr
}

func BorderBox() *ClassAttr {
	return newClassAttr().BorderBox()
}

func (attr *ClassAttr) Capitalize() *ClassAttr {
	attr.classes = append(attr.classes, "capitalize")
	return attr
}

func Capitalize() *ClassAttr {
	return newClassAttr().Capitalize()
}

func (attr *ClassAttr) Center() *ClassAttr {
	attr.classes = append(attr.classes, "center")
	return attr
}

func Center() *ClassAttr {
	return newClassAttr().Center()
}

func (attr *ClassAttr) Centered() *ClassAttr {
	attr.classes = append(attr.classes, "centered")
	return attr
}

func Centered() *ClassAttr {
	return newClassAttr().Centered()
}

func (attr *ClassAttr) Class_() *ClassAttr {
	attr.classes = append(attr.classes, "class_")
	return attr
}

func Class_() *ClassAttr {
	return newClassAttr().Class_()
}

func (attr *ClassAttr) Column() *ClassAttr {
	attr.classes = append(attr.classes, "column")
	return attr
}

func Column() *ClassAttr {
	return newClassAttr().Column()
}

func (attr *ClassAttr) ContentBox() *ClassAttr {
	attr.classes = append(attr.classes, "content-box")
	return attr
}

func ContentBox() *ClassAttr {
	return newClassAttr().ContentBox()
}

func (attr *ClassAttr) Contents() *ClassAttr {
	attr.classes = append(attr.classes, "contents")
	return attr
}

func Contents() *ClassAttr {
	return newClassAttr().Contents()
}

func (attr *ClassAttr) Danger() *ClassAttr {
	attr.classes = append(attr.classes, "danger")
	return attr
}

func Danger() *ClassAttr {
	return newClassAttr().Danger()
}

func (attr *ClassAttr) Default() *ClassAttr {
	attr.classes = append(attr.classes, "default")
	return attr
}

func Default() *ClassAttr {
	return newClassAttr().Default()
}

func (attr *ClassAttr) Disabled() *ClassAttr {
	attr.classes = append(attr.classes, "disabled")
	return attr
}

func Disabled() *ClassAttr {
	return newClassAttr().Disabled()
}

func (attr *ClassAttr) Editor() *ClassAttr {
	attr.classes = append(attr.classes, "editor")
	return attr
}

func Editor() *ClassAttr {
	return newClassAttr().Editor()
}

func (attr *ClassAttr) End() *ClassAttr {
	attr.classes = append(attr.classes, "end")
	return attr
}

func End() *ClassAttr {
	return newClassAttr().End()
}

func (attr *ClassAttr) Events() *ClassAttr {
	attr.classes = append(attr.classes, "events")
	return attr
}

func Events() *ClassAttr {
	return newClassAttr().Events()
}

func (attr *ClassAttr) FgAccent() *ClassAttr {
	attr.classes = append(attr.classes, "fg-accent")
	return attr
}

func FgAccent() *ClassAttr {
	return newClassAttr().FgAccent()
}

func (attr *ClassAttr) FgActive() *ClassAttr {
	attr.classes = append(attr.classes, "fg-active")
	return attr
}

func FgActive() *ClassAttr {
	return newClassAttr().FgActive()
}

func (attr *ClassAttr) FgAttention() *ClassAttr {
	attr.classes = append(attr.classes, "fg-attention")
	return attr
}

func FgAttention() *ClassAttr {
	return newClassAttr().FgAttention()
}

func (attr *ClassAttr) FgDanger() *ClassAttr {
	attr.classes = append(attr.classes, "fg-danger")
	return attr
}

func FgDanger() *ClassAttr {
	return newClassAttr().FgDanger()
}

func (attr *ClassAttr) FgDefault() *ClassAttr {
	attr.classes = append(attr.classes, "fg-default")
	return attr
}

func FgDefault() *ClassAttr {
	return newClassAttr().FgDefault()
}

func (attr *ClassAttr) FgMuted() *ClassAttr {
	attr.classes = append(attr.classes, "fg-muted")
	return attr
}

func FgMuted() *ClassAttr {
	return newClassAttr().FgMuted()
}

func (attr *ClassAttr) FgSevere() *ClassAttr {
	attr.classes = append(attr.classes, "fg-severe")
	return attr
}

func FgSevere() *ClassAttr {
	return newClassAttr().FgSevere()
}

func (attr *ClassAttr) FgSuccess() *ClassAttr {
	attr.classes = append(attr.classes, "fg-success")
	return attr
}

func FgSuccess() *ClassAttr {
	return newClassAttr().FgSuccess()
}

func (attr *ClassAttr) FgVariant() *ClassAttr {
	attr.classes = append(attr.classes, "fg-variant")
	return attr
}

func FgVariant() *ClassAttr {
	return newClassAttr().FgVariant()
}

func (attr *ClassAttr) FillCurrent() *ClassAttr {
	attr.classes = append(attr.classes, "fill-current")
	return attr
}

func FillCurrent() *ClassAttr {
	return newClassAttr().FillCurrent()
}

func (attr *ClassAttr) Fixed() *ClassAttr {
	attr.classes = append(attr.classes, "fixed")
	return attr
}

func Fixed() *ClassAttr {
	return newClassAttr().Fixed()
}

func (attr *ClassAttr) Flash() *ClassAttr {
	attr.classes = append(attr.classes, "flash")
	return attr
}

func Flash() *ClassAttr {
	return newClassAttr().Flash()
}

func (attr *ClassAttr) Flex() *ClassAttr {
	attr.classes = append(attr.classes, "flex")
	return attr
}

func Flex() *ClassAttr {
	return newClassAttr().Flex()
}

func (attr *ClassAttr) Grow() *ClassAttr {
	attr.classes = append(attr.classes, "grow")
	return attr
}

func Grow() *ClassAttr {
	return newClassAttr().Grow()
}

func (attr *ClassAttr) Height() *ClassAttr {
	attr.classes = append(attr.classes, "height")
	return attr
}

func Height() *ClassAttr {
	return newClassAttr().Height()
}

func (attr *ClassAttr) Hidden() *ClassAttr {
	attr.classes = append(attr.classes, "hidden")
	return attr
}

func Hidden() *ClassAttr {
	return newClassAttr().Hidden()
}

func (attr *ClassAttr) Highlight() *ClassAttr {
	attr.classes = append(attr.classes, "highlight")
	return attr
}

func Highlight() *ClassAttr {
	return newClassAttr().Highlight()
}

func (attr *ClassAttr) HljsAddition() *ClassAttr {
	attr.classes = append(attr.classes, "hljs-addition")
	return attr
}

func HljsAddition() *ClassAttr {
	return newClassAttr().HljsAddition()
}

func (attr *ClassAttr) HljsAttr() *ClassAttr {
	attr.classes = append(attr.classes, "hljs-attr")
	return attr
}

func HljsAttr() *ClassAttr {
	return newClassAttr().HljsAttr()
}

func (attr *ClassAttr) HljsAttribute() *ClassAttr {
	attr.classes = append(attr.classes, "hljs-attribute")
	return attr
}

func HljsAttribute() *ClassAttr {
	return newClassAttr().HljsAttribute()
}

func (attr *ClassAttr) HljsBuilt_in() *ClassAttr {
	attr.classes = append(attr.classes, "hljs-built_in")
	return attr
}

func HljsBuilt_in() *ClassAttr {
	return newClassAttr().HljsBuilt_in()
}

func (attr *ClassAttr) HljsBullet() *ClassAttr {
	attr.classes = append(attr.classes, "hljs-bullet")
	return attr
}

func HljsBullet() *ClassAttr {
	return newClassAttr().HljsBullet()
}

func (attr *ClassAttr) HljsCode() *ClassAttr {
	attr.classes = append(attr.classes, "hljs-code")
	return attr
}

func HljsCode() *ClassAttr {
	return newClassAttr().HljsCode()
}

func (attr *ClassAttr) HljsComment() *ClassAttr {
	attr.classes = append(attr.classes, "hljs-comment")
	return attr
}

func HljsComment() *ClassAttr {
	return newClassAttr().HljsComment()
}

func (attr *ClassAttr) HljsDeletion() *ClassAttr {
	attr.classes = append(attr.classes, "hljs-deletion")
	return attr
}

func HljsDeletion() *ClassAttr {
	return newClassAttr().HljsDeletion()
}

func (attr *ClassAttr) HljsEmphasis() *ClassAttr {
	attr.classes = append(attr.classes, "hljs-emphasis")
	return attr
}

func HljsEmphasis() *ClassAttr {
	return newClassAttr().HljsEmphasis()
}

func (attr *ClassAttr) HljsKeyword() *ClassAttr {
	attr.classes = append(attr.classes, "hljs-keyword")
	return attr
}

func HljsKeyword() *ClassAttr {
	return newClassAttr().HljsKeyword()
}

func (attr *ClassAttr) HljsLink() *ClassAttr {
	attr.classes = append(attr.classes, "hljs-link")
	return attr
}

func HljsLink() *ClassAttr {
	return newClassAttr().HljsLink()
}

func (attr *ClassAttr) HljsLiteral() *ClassAttr {
	attr.classes = append(attr.classes, "hljs-literal")
	return attr
}

func HljsLiteral() *ClassAttr {
	return newClassAttr().HljsLiteral()
}

func (attr *ClassAttr) HljsMeta() *ClassAttr {
	attr.classes = append(attr.classes, "hljs-meta")
	return attr
}

func HljsMeta() *ClassAttr {
	return newClassAttr().HljsMeta()
}

func (attr *ClassAttr) HljsName() *ClassAttr {
	attr.classes = append(attr.classes, "hljs-name")
	return attr
}

func HljsName() *ClassAttr {
	return newClassAttr().HljsName()
}

func (attr *ClassAttr) HljsNumber() *ClassAttr {
	attr.classes = append(attr.classes, "hljs-number")
	return attr
}

func HljsNumber() *ClassAttr {
	return newClassAttr().HljsNumber()
}

func (attr *ClassAttr) HljsOperator() *ClassAttr {
	attr.classes = append(attr.classes, "hljs-operator")
	return attr
}

func HljsOperator() *ClassAttr {
	return newClassAttr().HljsOperator()
}

func (attr *ClassAttr) HljsProperty() *ClassAttr {
	attr.classes = append(attr.classes, "hljs-property")
	return attr
}

func HljsProperty() *ClassAttr {
	return newClassAttr().HljsProperty()
}

func (attr *ClassAttr) HljsQuote() *ClassAttr {
	attr.classes = append(attr.classes, "hljs-quote")
	return attr
}

func HljsQuote() *ClassAttr {
	return newClassAttr().HljsQuote()
}

func (attr *ClassAttr) HljsRegexp() *ClassAttr {
	attr.classes = append(attr.classes, "hljs-regexp")
	return attr
}

func HljsRegexp() *ClassAttr {
	return newClassAttr().HljsRegexp()
}

func (attr *ClassAttr) HljsSection() *ClassAttr {
	attr.classes = append(attr.classes, "hljs-section")
	return attr
}

func HljsSection() *ClassAttr {
	return newClassAttr().HljsSection()
}

func (attr *ClassAttr) HljsSelectorAttr() *ClassAttr {
	attr.classes = append(attr.classes, "hljs-selector-attr")
	return attr
}

func HljsSelectorAttr() *ClassAttr {
	return newClassAttr().HljsSelectorAttr()
}

func (attr *ClassAttr) HljsSelectorClass() *ClassAttr {
	attr.classes = append(attr.classes, "hljs-selector-class")
	return attr
}

func HljsSelectorClass() *ClassAttr {
	return newClassAttr().HljsSelectorClass()
}

func (attr *ClassAttr) HljsSelectorId() *ClassAttr {
	attr.classes = append(attr.classes, "hljs-selector-id")
	return attr
}

func HljsSelectorId() *ClassAttr {
	return newClassAttr().HljsSelectorId()
}

func (attr *ClassAttr) HljsSelectorPseudo() *ClassAttr {
	attr.classes = append(attr.classes, "hljs-selector-pseudo")
	return attr
}

func HljsSelectorPseudo() *ClassAttr {
	return newClassAttr().HljsSelectorPseudo()
}

func (attr *ClassAttr) HljsSelectorTag() *ClassAttr {
	attr.classes = append(attr.classes, "hljs-selector-tag")
	return attr
}

func HljsSelectorTag() *ClassAttr {
	return newClassAttr().HljsSelectorTag()
}

func (attr *ClassAttr) HljsString() *ClassAttr {
	attr.classes = append(attr.classes, "hljs-string")
	return attr
}

func HljsString() *ClassAttr {
	return newClassAttr().HljsString()
}

func (attr *ClassAttr) HljsStrong() *ClassAttr {
	attr.classes = append(attr.classes, "hljs-strong")
	return attr
}

func HljsStrong() *ClassAttr {
	return newClassAttr().HljsStrong()
}

func (attr *ClassAttr) HljsSubst() *ClassAttr {
	attr.classes = append(attr.classes, "hljs-subst")
	return attr
}

func HljsSubst() *ClassAttr {
	return newClassAttr().HljsSubst()
}

func (attr *ClassAttr) HljsSymbol() *ClassAttr {
	attr.classes = append(attr.classes, "hljs-symbol")
	return attr
}

func HljsSymbol() *ClassAttr {
	return newClassAttr().HljsSymbol()
}

func (attr *ClassAttr) HljsTag() *ClassAttr {
	attr.classes = append(attr.classes, "hljs-tag")
	return attr
}

func HljsTag() *ClassAttr {
	return newClassAttr().HljsTag()
}

func (attr *ClassAttr) HljsTitle() *ClassAttr {
	attr.classes = append(attr.classes, "hljs-title")
	return attr
}

func HljsTitle() *ClassAttr {
	return newClassAttr().HljsTitle()
}

func (attr *ClassAttr) HljsType() *ClassAttr {
	attr.classes = append(attr.classes, "hljs-type")
	return attr
}

func HljsType() *ClassAttr {
	return newClassAttr().HljsType()
}

func (attr *ClassAttr) HljsVariable() *ClassAttr {
	attr.classes = append(attr.classes, "hljs-variable")
	return attr
}

func HljsVariable() *ClassAttr {
	return newClassAttr().HljsVariable()
}

func (attr *ClassAttr) Inline() *ClassAttr {
	attr.classes = append(attr.classes, "inline")
	return attr
}

func Inline() *ClassAttr {
	return newClassAttr().Inline()
}

func (attr *ClassAttr) Italic() *ClassAttr {
	attr.classes = append(attr.classes, "italic")
	return attr
}

func Italic() *ClassAttr {
	return newClassAttr().Italic()
}

func (attr *ClassAttr) Justified() *ClassAttr {
	attr.classes = append(attr.classes, "justified")
	return attr
}

func Justified() *ClassAttr {
	return newClassAttr().Justified()
}

func (attr *ClassAttr) Large() *ClassAttr {
	attr.classes = append(attr.classes, "large")
	return attr
}

func Large() *ClassAttr {
	return newClassAttr().Large()
}

func (attr *ClassAttr) Larger() *ClassAttr {
	attr.classes = append(attr.classes, "larger")
	return attr
}

func Larger() *ClassAttr {
	return newClassAttr().Larger()
}

func (attr *ClassAttr) LayoutSimple() *ClassAttr {
	attr.classes = append(attr.classes, "layout-simple")
	return attr
}

func LayoutSimple() *ClassAttr {
	return newClassAttr().LayoutSimple()
}

func (attr *ClassAttr) Left() *ClassAttr {
	attr.classes = append(attr.classes, "left")
	return attr
}

func Left() *ClassAttr {
	return newClassAttr().Left()
}

func (attr *ClassAttr) Lowercase() *ClassAttr {
	attr.classes = append(attr.classes, "lowercase")
	return attr
}

func Lowercase() *ClassAttr {
	return newClassAttr().Lowercase()
}

func (attr *ClassAttr) M_125() *ClassAttr {
	attr.classes = append(attr.classes, "m-.125")
	return attr
}

func M_125() *ClassAttr {
	return newClassAttr().M_125()
}

func (attr *ClassAttr) M_25() *ClassAttr {
	attr.classes = append(attr.classes, "m-.25")
	return attr
}

func M_25() *ClassAttr {
	return newClassAttr().M_25()
}

func (attr *ClassAttr) M_5() *ClassAttr {
	attr.classes = append(attr.classes, "m-.5")
	return attr
}

func M_5() *ClassAttr {
	return newClassAttr().M_5()
}

func (attr *ClassAttr) M_75() *ClassAttr {
	attr.classes = append(attr.classes, "m-.75")
	return attr
}

func M_75() *ClassAttr {
	return newClassAttr().M_75()
}

func (attr *ClassAttr) M0() *ClassAttr {
	attr.classes = append(attr.classes, "m-0")
	return attr
}

func M0() *ClassAttr {
	return newClassAttr().M0()
}

func (attr *ClassAttr) M1() *ClassAttr {
	attr.classes = append(attr.classes, "m-1")
	return attr
}

func M1() *ClassAttr {
	return newClassAttr().M1()
}

func (attr *ClassAttr) M1_25() *ClassAttr {
	attr.classes = append(attr.classes, "m-1.25")
	return attr
}

func M1_25() *ClassAttr {
	return newClassAttr().M1_25()
}

func (attr *ClassAttr) M1_5() *ClassAttr {
	attr.classes = append(attr.classes, "m-1.5")
	return attr
}

func M1_5() *ClassAttr {
	return newClassAttr().M1_5()
}

func (attr *ClassAttr) M1_75() *ClassAttr {
	attr.classes = append(attr.classes, "m-1.75")
	return attr
}

func M1_75() *ClassAttr {
	return newClassAttr().M1_75()
}

func (attr *ClassAttr) M2() *ClassAttr {
	attr.classes = append(attr.classes, "m-2")
	return attr
}

func M2() *ClassAttr {
	return newClassAttr().M2()
}

func (attr *ClassAttr) M3() *ClassAttr {
	attr.classes = append(attr.classes, "m-3")
	return attr
}

func M3() *ClassAttr {
	return newClassAttr().M3()
}

func (attr *ClassAttr) M4() *ClassAttr {
	attr.classes = append(attr.classes, "m-4")
	return attr
}

func M4() *ClassAttr {
	return newClassAttr().M4()
}

func (attr *ClassAttr) Mb_125() *ClassAttr {
	attr.classes = append(attr.classes, "mb-.125")
	return attr
}

func Mb_125() *ClassAttr {
	return newClassAttr().Mb_125()
}

func (attr *ClassAttr) Mb_25() *ClassAttr {
	attr.classes = append(attr.classes, "mb-.25")
	return attr
}

func Mb_25() *ClassAttr {
	return newClassAttr().Mb_25()
}

func (attr *ClassAttr) Mb_5() *ClassAttr {
	attr.classes = append(attr.classes, "mb-.5")
	return attr
}

func Mb_5() *ClassAttr {
	return newClassAttr().Mb_5()
}

func (attr *ClassAttr) Mb_75() *ClassAttr {
	attr.classes = append(attr.classes, "mb-.75")
	return attr
}

func Mb_75() *ClassAttr {
	return newClassAttr().Mb_75()
}

func (attr *ClassAttr) Mb0() *ClassAttr {
	attr.classes = append(attr.classes, "mb-0")
	return attr
}

func Mb0() *ClassAttr {
	return newClassAttr().Mb0()
}

func (attr *ClassAttr) Mb1() *ClassAttr {
	attr.classes = append(attr.classes, "mb-1")
	return attr
}

func Mb1() *ClassAttr {
	return newClassAttr().Mb1()
}

func (attr *ClassAttr) Mb1_25() *ClassAttr {
	attr.classes = append(attr.classes, "mb-1.25")
	return attr
}

func Mb1_25() *ClassAttr {
	return newClassAttr().Mb1_25()
}

func (attr *ClassAttr) Mb1_5() *ClassAttr {
	attr.classes = append(attr.classes, "mb-1.5")
	return attr
}

func Mb1_5() *ClassAttr {
	return newClassAttr().Mb1_5()
}

func (attr *ClassAttr) Mb1_75() *ClassAttr {
	attr.classes = append(attr.classes, "mb-1.75")
	return attr
}

func Mb1_75() *ClassAttr {
	return newClassAttr().Mb1_75()
}

func (attr *ClassAttr) Mb2() *ClassAttr {
	attr.classes = append(attr.classes, "mb-2")
	return attr
}

func Mb2() *ClassAttr {
	return newClassAttr().Mb2()
}

func (attr *ClassAttr) Mb3() *ClassAttr {
	attr.classes = append(attr.classes, "mb-3")
	return attr
}

func Mb3() *ClassAttr {
	return newClassAttr().Mb3()
}

func (attr *ClassAttr) Mb4() *ClassAttr {
	attr.classes = append(attr.classes, "mb-4")
	return attr
}

func Mb4() *ClassAttr {
	return newClassAttr().Mb4()
}

func (attr *ClassAttr) Ml_125() *ClassAttr {
	attr.classes = append(attr.classes, "ml-.125")
	return attr
}

func Ml_125() *ClassAttr {
	return newClassAttr().Ml_125()
}

func (attr *ClassAttr) Ml_25() *ClassAttr {
	attr.classes = append(attr.classes, "ml-.25")
	return attr
}

func Ml_25() *ClassAttr {
	return newClassAttr().Ml_25()
}

func (attr *ClassAttr) Ml_5() *ClassAttr {
	attr.classes = append(attr.classes, "ml-.5")
	return attr
}

func Ml_5() *ClassAttr {
	return newClassAttr().Ml_5()
}

func (attr *ClassAttr) Ml_75() *ClassAttr {
	attr.classes = append(attr.classes, "ml-.75")
	return attr
}

func Ml_75() *ClassAttr {
	return newClassAttr().Ml_75()
}

func (attr *ClassAttr) Ml0() *ClassAttr {
	attr.classes = append(attr.classes, "ml-0")
	return attr
}

func Ml0() *ClassAttr {
	return newClassAttr().Ml0()
}

func (attr *ClassAttr) Ml1() *ClassAttr {
	attr.classes = append(attr.classes, "ml-1")
	return attr
}

func Ml1() *ClassAttr {
	return newClassAttr().Ml1()
}

func (attr *ClassAttr) Ml1_25() *ClassAttr {
	attr.classes = append(attr.classes, "ml-1.25")
	return attr
}

func Ml1_25() *ClassAttr {
	return newClassAttr().Ml1_25()
}

func (attr *ClassAttr) Ml1_5() *ClassAttr {
	attr.classes = append(attr.classes, "ml-1.5")
	return attr
}

func Ml1_5() *ClassAttr {
	return newClassAttr().Ml1_5()
}

func (attr *ClassAttr) Ml1_75() *ClassAttr {
	attr.classes = append(attr.classes, "ml-1.75")
	return attr
}

func Ml1_75() *ClassAttr {
	return newClassAttr().Ml1_75()
}

func (attr *ClassAttr) Ml2() *ClassAttr {
	attr.classes = append(attr.classes, "ml-2")
	return attr
}

func Ml2() *ClassAttr {
	return newClassAttr().Ml2()
}

func (attr *ClassAttr) Ml3() *ClassAttr {
	attr.classes = append(attr.classes, "ml-3")
	return attr
}

func Ml3() *ClassAttr {
	return newClassAttr().Ml3()
}

func (attr *ClassAttr) Ml4() *ClassAttr {
	attr.classes = append(attr.classes, "ml-4")
	return attr
}

func Ml4() *ClassAttr {
	return newClassAttr().Ml4()
}

func (attr *ClassAttr) Monospace() *ClassAttr {
	attr.classes = append(attr.classes, "monospace")
	return attr
}

func Monospace() *ClassAttr {
	return newClassAttr().Monospace()
}

func (attr *ClassAttr) Mr_125() *ClassAttr {
	attr.classes = append(attr.classes, "mr-.125")
	return attr
}

func Mr_125() *ClassAttr {
	return newClassAttr().Mr_125()
}

func (attr *ClassAttr) Mr_25() *ClassAttr {
	attr.classes = append(attr.classes, "mr-.25")
	return attr
}

func Mr_25() *ClassAttr {
	return newClassAttr().Mr_25()
}

func (attr *ClassAttr) Mr_5() *ClassAttr {
	attr.classes = append(attr.classes, "mr-.5")
	return attr
}

func Mr_5() *ClassAttr {
	return newClassAttr().Mr_5()
}

func (attr *ClassAttr) Mr_75() *ClassAttr {
	attr.classes = append(attr.classes, "mr-.75")
	return attr
}

func Mr_75() *ClassAttr {
	return newClassAttr().Mr_75()
}

func (attr *ClassAttr) Mr0() *ClassAttr {
	attr.classes = append(attr.classes, "mr-0")
	return attr
}

func Mr0() *ClassAttr {
	return newClassAttr().Mr0()
}

func (attr *ClassAttr) Mr1() *ClassAttr {
	attr.classes = append(attr.classes, "mr-1")
	return attr
}

func Mr1() *ClassAttr {
	return newClassAttr().Mr1()
}

func (attr *ClassAttr) Mr1_25() *ClassAttr {
	attr.classes = append(attr.classes, "mr-1.25")
	return attr
}

func Mr1_25() *ClassAttr {
	return newClassAttr().Mr1_25()
}

func (attr *ClassAttr) Mr1_5() *ClassAttr {
	attr.classes = append(attr.classes, "mr-1.5")
	return attr
}

func Mr1_5() *ClassAttr {
	return newClassAttr().Mr1_5()
}

func (attr *ClassAttr) Mr1_75() *ClassAttr {
	attr.classes = append(attr.classes, "mr-1.75")
	return attr
}

func Mr1_75() *ClassAttr {
	return newClassAttr().Mr1_75()
}

func (attr *ClassAttr) Mr2() *ClassAttr {
	attr.classes = append(attr.classes, "mr-2")
	return attr
}

func Mr2() *ClassAttr {
	return newClassAttr().Mr2()
}

func (attr *ClassAttr) Mr3() *ClassAttr {
	attr.classes = append(attr.classes, "mr-3")
	return attr
}

func Mr3() *ClassAttr {
	return newClassAttr().Mr3()
}

func (attr *ClassAttr) Mr4() *ClassAttr {
	attr.classes = append(attr.classes, "mr-4")
	return attr
}

func Mr4() *ClassAttr {
	return newClassAttr().Mr4()
}

func (attr *ClassAttr) Mt_125() *ClassAttr {
	attr.classes = append(attr.classes, "mt-.125")
	return attr
}

func Mt_125() *ClassAttr {
	return newClassAttr().Mt_125()
}

func (attr *ClassAttr) Mt_25() *ClassAttr {
	attr.classes = append(attr.classes, "mt-.25")
	return attr
}

func Mt_25() *ClassAttr {
	return newClassAttr().Mt_25()
}

func (attr *ClassAttr) Mt_5() *ClassAttr {
	attr.classes = append(attr.classes, "mt-.5")
	return attr
}

func Mt_5() *ClassAttr {
	return newClassAttr().Mt_5()
}

func (attr *ClassAttr) Mt_75() *ClassAttr {
	attr.classes = append(attr.classes, "mt-.75")
	return attr
}

func Mt_75() *ClassAttr {
	return newClassAttr().Mt_75()
}

func (attr *ClassAttr) Mt0() *ClassAttr {
	attr.classes = append(attr.classes, "mt-0")
	return attr
}

func Mt0() *ClassAttr {
	return newClassAttr().Mt0()
}

func (attr *ClassAttr) Mt1() *ClassAttr {
	attr.classes = append(attr.classes, "mt-1")
	return attr
}

func Mt1() *ClassAttr {
	return newClassAttr().Mt1()
}

func (attr *ClassAttr) Mt1_25() *ClassAttr {
	attr.classes = append(attr.classes, "mt-1.25")
	return attr
}

func Mt1_25() *ClassAttr {
	return newClassAttr().Mt1_25()
}

func (attr *ClassAttr) Mt1_5() *ClassAttr {
	attr.classes = append(attr.classes, "mt-1.5")
	return attr
}

func Mt1_5() *ClassAttr {
	return newClassAttr().Mt1_5()
}

func (attr *ClassAttr) Mt1_75() *ClassAttr {
	attr.classes = append(attr.classes, "mt-1.75")
	return attr
}

func Mt1_75() *ClassAttr {
	return newClassAttr().Mt1_75()
}

func (attr *ClassAttr) Mt2() *ClassAttr {
	attr.classes = append(attr.classes, "mt-2")
	return attr
}

func Mt2() *ClassAttr {
	return newClassAttr().Mt2()
}

func (attr *ClassAttr) Mt3() *ClassAttr {
	attr.classes = append(attr.classes, "mt-3")
	return attr
}

func Mt3() *ClassAttr {
	return newClassAttr().Mt3()
}

func (attr *ClassAttr) Mt4() *ClassAttr {
	attr.classes = append(attr.classes, "mt-4")
	return attr
}

func Mt4() *ClassAttr {
	return newClassAttr().Mt4()
}

func (attr *ClassAttr) Muted() *ClassAttr {
	attr.classes = append(attr.classes, "muted")
	return attr
}

func Muted() *ClassAttr {
	return newClassAttr().Muted()
}

func (attr *ClassAttr) Mx_125() *ClassAttr {
	attr.classes = append(attr.classes, "mx-.125")
	return attr
}

func Mx_125() *ClassAttr {
	return newClassAttr().Mx_125()
}

func (attr *ClassAttr) Mx_25() *ClassAttr {
	attr.classes = append(attr.classes, "mx-.25")
	return attr
}

func Mx_25() *ClassAttr {
	return newClassAttr().Mx_25()
}

func (attr *ClassAttr) Mx_5() *ClassAttr {
	attr.classes = append(attr.classes, "mx-.5")
	return attr
}

func Mx_5() *ClassAttr {
	return newClassAttr().Mx_5()
}

func (attr *ClassAttr) Mx_75() *ClassAttr {
	attr.classes = append(attr.classes, "mx-.75")
	return attr
}

func Mx_75() *ClassAttr {
	return newClassAttr().Mx_75()
}

func (attr *ClassAttr) Mx0() *ClassAttr {
	attr.classes = append(attr.classes, "mx-0")
	return attr
}

func Mx0() *ClassAttr {
	return newClassAttr().Mx0()
}

func (attr *ClassAttr) Mx1() *ClassAttr {
	attr.classes = append(attr.classes, "mx-1")
	return attr
}

func Mx1() *ClassAttr {
	return newClassAttr().Mx1()
}

func (attr *ClassAttr) Mx1_25() *ClassAttr {
	attr.classes = append(attr.classes, "mx-1.25")
	return attr
}

func Mx1_25() *ClassAttr {
	return newClassAttr().Mx1_25()
}

func (attr *ClassAttr) Mx1_5() *ClassAttr {
	attr.classes = append(attr.classes, "mx-1.5")
	return attr
}

func Mx1_5() *ClassAttr {
	return newClassAttr().Mx1_5()
}

func (attr *ClassAttr) Mx1_75() *ClassAttr {
	attr.classes = append(attr.classes, "mx-1.75")
	return attr
}

func Mx1_75() *ClassAttr {
	return newClassAttr().Mx1_75()
}

func (attr *ClassAttr) Mx2() *ClassAttr {
	attr.classes = append(attr.classes, "mx-2")
	return attr
}

func Mx2() *ClassAttr {
	return newClassAttr().Mx2()
}

func (attr *ClassAttr) Mx3() *ClassAttr {
	attr.classes = append(attr.classes, "mx-3")
	return attr
}

func Mx3() *ClassAttr {
	return newClassAttr().Mx3()
}

func (attr *ClassAttr) Mx4() *ClassAttr {
	attr.classes = append(attr.classes, "mx-4")
	return attr
}

func Mx4() *ClassAttr {
	return newClassAttr().Mx4()
}

func (attr *ClassAttr) My_125() *ClassAttr {
	attr.classes = append(attr.classes, "my-.125")
	return attr
}

func My_125() *ClassAttr {
	return newClassAttr().My_125()
}

func (attr *ClassAttr) My_25() *ClassAttr {
	attr.classes = append(attr.classes, "my-.25")
	return attr
}

func My_25() *ClassAttr {
	return newClassAttr().My_25()
}

func (attr *ClassAttr) My_5() *ClassAttr {
	attr.classes = append(attr.classes, "my-.5")
	return attr
}

func My_5() *ClassAttr {
	return newClassAttr().My_5()
}

func (attr *ClassAttr) My_75() *ClassAttr {
	attr.classes = append(attr.classes, "my-.75")
	return attr
}

func My_75() *ClassAttr {
	return newClassAttr().My_75()
}

func (attr *ClassAttr) My0() *ClassAttr {
	attr.classes = append(attr.classes, "my-0")
	return attr
}

func My0() *ClassAttr {
	return newClassAttr().My0()
}

func (attr *ClassAttr) My1() *ClassAttr {
	attr.classes = append(attr.classes, "my-1")
	return attr
}

func My1() *ClassAttr {
	return newClassAttr().My1()
}

func (attr *ClassAttr) My1_25() *ClassAttr {
	attr.classes = append(attr.classes, "my-1.25")
	return attr
}

func My1_25() *ClassAttr {
	return newClassAttr().My1_25()
}

func (attr *ClassAttr) My1_5() *ClassAttr {
	attr.classes = append(attr.classes, "my-1.5")
	return attr
}

func My1_5() *ClassAttr {
	return newClassAttr().My1_5()
}

func (attr *ClassAttr) My1_75() *ClassAttr {
	attr.classes = append(attr.classes, "my-1.75")
	return attr
}

func My1_75() *ClassAttr {
	return newClassAttr().My1_75()
}

func (attr *ClassAttr) My2() *ClassAttr {
	attr.classes = append(attr.classes, "my-2")
	return attr
}

func My2() *ClassAttr {
	return newClassAttr().My2()
}

func (attr *ClassAttr) My3() *ClassAttr {
	attr.classes = append(attr.classes, "my-3")
	return attr
}

func My3() *ClassAttr {
	return newClassAttr().My3()
}

func (attr *ClassAttr) My4() *ClassAttr {
	attr.classes = append(attr.classes, "my-4")
	return attr
}

func My4() *ClassAttr {
	return newClassAttr().My4()
}

func (attr *ClassAttr) NoEvents() *ClassAttr {
	attr.classes = append(attr.classes, "no-events")
	return attr
}

func NoEvents() *ClassAttr {
	return newClassAttr().NoEvents()
}

func (attr *ClassAttr) NoFill() *ClassAttr {
	attr.classes = append(attr.classes, "no-fill")
	return attr
}

func NoFill() *ClassAttr {
	return newClassAttr().NoFill()
}

func (attr *ClassAttr) NoOverflow() *ClassAttr {
	attr.classes = append(attr.classes, "no-overflow")
	return attr
}

func NoOverflow() *ClassAttr {
	return newClassAttr().NoOverflow()
}

func (attr *ClassAttr) NoResize() *ClassAttr {
	attr.classes = append(attr.classes, "no-resize")
	return attr
}

func NoResize() *ClassAttr {
	return newClassAttr().NoResize()
}

func (attr *ClassAttr) NoSelect() *ClassAttr {
	attr.classes = append(attr.classes, "no-select")
	return attr
}

func NoSelect() *ClassAttr {
	return newClassAttr().NoSelect()
}

func (attr *ClassAttr) NoShadow() *ClassAttr {
	attr.classes = append(attr.classes, "no-shadow")
	return attr
}

func NoShadow() *ClassAttr {
	return newClassAttr().NoShadow()
}

func (attr *ClassAttr) NoStroke() *ClassAttr {
	attr.classes = append(attr.classes, "no-stroke")
	return attr
}

func NoStroke() *ClassAttr {
	return newClassAttr().NoStroke()
}

func (attr *ClassAttr) NoWrap() *ClassAttr {
	attr.classes = append(attr.classes, "no-wrap")
	return attr
}

func NoWrap() *ClassAttr {
	return newClassAttr().NoWrap()
}

func (attr *ClassAttr) Normal() *ClassAttr {
	attr.classes = append(attr.classes, "normal")
	return attr
}

func Normal() *ClassAttr {
	return newClassAttr().Normal()
}

func (attr *ClassAttr) NotAllowed() *ClassAttr {
	attr.classes = append(attr.classes, "not-allowed")
	return attr
}

func NotAllowed() *ClassAttr {
	return newClassAttr().NotAllowed()
}

func (attr *ClassAttr) Overflow() *ClassAttr {
	attr.classes = append(attr.classes, "overflow")
	return attr
}

func Overflow() *ClassAttr {
	return newClassAttr().Overflow()
}

func (attr *ClassAttr) OverflowX() *ClassAttr {
	attr.classes = append(attr.classes, "overflow-x")
	return attr
}

func OverflowX() *ClassAttr {
	return newClassAttr().OverflowX()
}

func (attr *ClassAttr) OverflowY() *ClassAttr {
	attr.classes = append(attr.classes, "overflow-y")
	return attr
}

func OverflowY() *ClassAttr {
	return newClassAttr().OverflowY()
}

func (attr *ClassAttr) P_125() *ClassAttr {
	attr.classes = append(attr.classes, "p-.125")
	return attr
}

func P_125() *ClassAttr {
	return newClassAttr().P_125()
}

func (attr *ClassAttr) P_25() *ClassAttr {
	attr.classes = append(attr.classes, "p-.25")
	return attr
}

func P_25() *ClassAttr {
	return newClassAttr().P_25()
}

func (attr *ClassAttr) P_5() *ClassAttr {
	attr.classes = append(attr.classes, "p-.5")
	return attr
}

func P_5() *ClassAttr {
	return newClassAttr().P_5()
}

func (attr *ClassAttr) P_75() *ClassAttr {
	attr.classes = append(attr.classes, "p-.75")
	return attr
}

func P_75() *ClassAttr {
	return newClassAttr().P_75()
}

func (attr *ClassAttr) P0() *ClassAttr {
	attr.classes = append(attr.classes, "p-0")
	return attr
}

func P0() *ClassAttr {
	return newClassAttr().P0()
}

func (attr *ClassAttr) P1() *ClassAttr {
	attr.classes = append(attr.classes, "p-1")
	return attr
}

func P1() *ClassAttr {
	return newClassAttr().P1()
}

func (attr *ClassAttr) P1_25() *ClassAttr {
	attr.classes = append(attr.classes, "p-1.25")
	return attr
}

func P1_25() *ClassAttr {
	return newClassAttr().P1_25()
}

func (attr *ClassAttr) P1_5() *ClassAttr {
	attr.classes = append(attr.classes, "p-1.5")
	return attr
}

func P1_5() *ClassAttr {
	return newClassAttr().P1_5()
}

func (attr *ClassAttr) P1_75() *ClassAttr {
	attr.classes = append(attr.classes, "p-1.75")
	return attr
}

func P1_75() *ClassAttr {
	return newClassAttr().P1_75()
}

func (attr *ClassAttr) P2() *ClassAttr {
	attr.classes = append(attr.classes, "p-2")
	return attr
}

func P2() *ClassAttr {
	return newClassAttr().P2()
}

func (attr *ClassAttr) P3() *ClassAttr {
	attr.classes = append(attr.classes, "p-3")
	return attr
}

func P3() *ClassAttr {
	return newClassAttr().P3()
}

func (attr *ClassAttr) P4() *ClassAttr {
	attr.classes = append(attr.classes, "p-4")
	return attr
}

func P4() *ClassAttr {
	return newClassAttr().P4()
}

func (attr *ClassAttr) Pb_125() *ClassAttr {
	attr.classes = append(attr.classes, "pb-.125")
	return attr
}

func Pb_125() *ClassAttr {
	return newClassAttr().Pb_125()
}

func (attr *ClassAttr) Pb_25() *ClassAttr {
	attr.classes = append(attr.classes, "pb-.25")
	return attr
}

func Pb_25() *ClassAttr {
	return newClassAttr().Pb_25()
}

func (attr *ClassAttr) Pb_5() *ClassAttr {
	attr.classes = append(attr.classes, "pb-.5")
	return attr
}

func Pb_5() *ClassAttr {
	return newClassAttr().Pb_5()
}

func (attr *ClassAttr) Pb_75() *ClassAttr {
	attr.classes = append(attr.classes, "pb-.75")
	return attr
}

func Pb_75() *ClassAttr {
	return newClassAttr().Pb_75()
}

func (attr *ClassAttr) Pb0() *ClassAttr {
	attr.classes = append(attr.classes, "pb-0")
	return attr
}

func Pb0() *ClassAttr {
	return newClassAttr().Pb0()
}

func (attr *ClassAttr) Pb1() *ClassAttr {
	attr.classes = append(attr.classes, "pb-1")
	return attr
}

func Pb1() *ClassAttr {
	return newClassAttr().Pb1()
}

func (attr *ClassAttr) Pb1_25() *ClassAttr {
	attr.classes = append(attr.classes, "pb-1.25")
	return attr
}

func Pb1_25() *ClassAttr {
	return newClassAttr().Pb1_25()
}

func (attr *ClassAttr) Pb1_5() *ClassAttr {
	attr.classes = append(attr.classes, "pb-1.5")
	return attr
}

func Pb1_5() *ClassAttr {
	return newClassAttr().Pb1_5()
}

func (attr *ClassAttr) Pb1_75() *ClassAttr {
	attr.classes = append(attr.classes, "pb-1.75")
	return attr
}

func Pb1_75() *ClassAttr {
	return newClassAttr().Pb1_75()
}

func (attr *ClassAttr) Pb2() *ClassAttr {
	attr.classes = append(attr.classes, "pb-2")
	return attr
}

func Pb2() *ClassAttr {
	return newClassAttr().Pb2()
}

func (attr *ClassAttr) Pb3() *ClassAttr {
	attr.classes = append(attr.classes, "pb-3")
	return attr
}

func Pb3() *ClassAttr {
	return newClassAttr().Pb3()
}

func (attr *ClassAttr) Pb4() *ClassAttr {
	attr.classes = append(attr.classes, "pb-4")
	return attr
}

func Pb4() *ClassAttr {
	return newClassAttr().Pb4()
}

func (attr *ClassAttr) Pl_125() *ClassAttr {
	attr.classes = append(attr.classes, "pl-.125")
	return attr
}

func Pl_125() *ClassAttr {
	return newClassAttr().Pl_125()
}

func (attr *ClassAttr) Pl_25() *ClassAttr {
	attr.classes = append(attr.classes, "pl-.25")
	return attr
}

func Pl_25() *ClassAttr {
	return newClassAttr().Pl_25()
}

func (attr *ClassAttr) Pl_5() *ClassAttr {
	attr.classes = append(attr.classes, "pl-.5")
	return attr
}

func Pl_5() *ClassAttr {
	return newClassAttr().Pl_5()
}

func (attr *ClassAttr) Pl_75() *ClassAttr {
	attr.classes = append(attr.classes, "pl-.75")
	return attr
}

func Pl_75() *ClassAttr {
	return newClassAttr().Pl_75()
}

func (attr *ClassAttr) Pl0() *ClassAttr {
	attr.classes = append(attr.classes, "pl-0")
	return attr
}

func Pl0() *ClassAttr {
	return newClassAttr().Pl0()
}

func (attr *ClassAttr) Pl1() *ClassAttr {
	attr.classes = append(attr.classes, "pl-1")
	return attr
}

func Pl1() *ClassAttr {
	return newClassAttr().Pl1()
}

func (attr *ClassAttr) Pl1_25() *ClassAttr {
	attr.classes = append(attr.classes, "pl-1.25")
	return attr
}

func Pl1_25() *ClassAttr {
	return newClassAttr().Pl1_25()
}

func (attr *ClassAttr) Pl1_5() *ClassAttr {
	attr.classes = append(attr.classes, "pl-1.5")
	return attr
}

func Pl1_5() *ClassAttr {
	return newClassAttr().Pl1_5()
}

func (attr *ClassAttr) Pl1_75() *ClassAttr {
	attr.classes = append(attr.classes, "pl-1.75")
	return attr
}

func Pl1_75() *ClassAttr {
	return newClassAttr().Pl1_75()
}

func (attr *ClassAttr) Pl2() *ClassAttr {
	attr.classes = append(attr.classes, "pl-2")
	return attr
}

func Pl2() *ClassAttr {
	return newClassAttr().Pl2()
}

func (attr *ClassAttr) Pl3() *ClassAttr {
	attr.classes = append(attr.classes, "pl-3")
	return attr
}

func Pl3() *ClassAttr {
	return newClassAttr().Pl3()
}

func (attr *ClassAttr) Pl4() *ClassAttr {
	attr.classes = append(attr.classes, "pl-4")
	return attr
}

func Pl4() *ClassAttr {
	return newClassAttr().Pl4()
}

func (attr *ClassAttr) Pointer() *ClassAttr {
	attr.classes = append(attr.classes, "pointer")
	return attr
}

func Pointer() *ClassAttr {
	return newClassAttr().Pointer()
}

func (attr *ClassAttr) Pr_125() *ClassAttr {
	attr.classes = append(attr.classes, "pr-.125")
	return attr
}

func Pr_125() *ClassAttr {
	return newClassAttr().Pr_125()
}

func (attr *ClassAttr) Pr_25() *ClassAttr {
	attr.classes = append(attr.classes, "pr-.25")
	return attr
}

func Pr_25() *ClassAttr {
	return newClassAttr().Pr_25()
}

func (attr *ClassAttr) Pr_5() *ClassAttr {
	attr.classes = append(attr.classes, "pr-.5")
	return attr
}

func Pr_5() *ClassAttr {
	return newClassAttr().Pr_5()
}

func (attr *ClassAttr) Pr_75() *ClassAttr {
	attr.classes = append(attr.classes, "pr-.75")
	return attr
}

func Pr_75() *ClassAttr {
	return newClassAttr().Pr_75()
}

func (attr *ClassAttr) Pr0() *ClassAttr {
	attr.classes = append(attr.classes, "pr-0")
	return attr
}

func Pr0() *ClassAttr {
	return newClassAttr().Pr0()
}

func (attr *ClassAttr) Pr1() *ClassAttr {
	attr.classes = append(attr.classes, "pr-1")
	return attr
}

func Pr1() *ClassAttr {
	return newClassAttr().Pr1()
}

func (attr *ClassAttr) Pr1_25() *ClassAttr {
	attr.classes = append(attr.classes, "pr-1.25")
	return attr
}

func Pr1_25() *ClassAttr {
	return newClassAttr().Pr1_25()
}

func (attr *ClassAttr) Pr1_5() *ClassAttr {
	attr.classes = append(attr.classes, "pr-1.5")
	return attr
}

func Pr1_5() *ClassAttr {
	return newClassAttr().Pr1_5()
}

func (attr *ClassAttr) Pr1_75() *ClassAttr {
	attr.classes = append(attr.classes, "pr-1.75")
	return attr
}

func Pr1_75() *ClassAttr {
	return newClassAttr().Pr1_75()
}

func (attr *ClassAttr) Pr2() *ClassAttr {
	attr.classes = append(attr.classes, "pr-2")
	return attr
}

func Pr2() *ClassAttr {
	return newClassAttr().Pr2()
}

func (attr *ClassAttr) Pr3() *ClassAttr {
	attr.classes = append(attr.classes, "pr-3")
	return attr
}

func Pr3() *ClassAttr {
	return newClassAttr().Pr3()
}

func (attr *ClassAttr) Pr4() *ClassAttr {
	attr.classes = append(attr.classes, "pr-4")
	return attr
}

func Pr4() *ClassAttr {
	return newClassAttr().Pr4()
}

func (attr *ClassAttr) Pt_125() *ClassAttr {
	attr.classes = append(attr.classes, "pt-.125")
	return attr
}

func Pt_125() *ClassAttr {
	return newClassAttr().Pt_125()
}

func (attr *ClassAttr) Pt_25() *ClassAttr {
	attr.classes = append(attr.classes, "pt-.25")
	return attr
}

func Pt_25() *ClassAttr {
	return newClassAttr().Pt_25()
}

func (attr *ClassAttr) Pt_5() *ClassAttr {
	attr.classes = append(attr.classes, "pt-.5")
	return attr
}

func Pt_5() *ClassAttr {
	return newClassAttr().Pt_5()
}

func (attr *ClassAttr) Pt_75() *ClassAttr {
	attr.classes = append(attr.classes, "pt-.75")
	return attr
}

func Pt_75() *ClassAttr {
	return newClassAttr().Pt_75()
}

func (attr *ClassAttr) Pt0() *ClassAttr {
	attr.classes = append(attr.classes, "pt-0")
	return attr
}

func Pt0() *ClassAttr {
	return newClassAttr().Pt0()
}

func (attr *ClassAttr) Pt1() *ClassAttr {
	attr.classes = append(attr.classes, "pt-1")
	return attr
}

func Pt1() *ClassAttr {
	return newClassAttr().Pt1()
}

func (attr *ClassAttr) Pt1_25() *ClassAttr {
	attr.classes = append(attr.classes, "pt-1.25")
	return attr
}

func Pt1_25() *ClassAttr {
	return newClassAttr().Pt1_25()
}

func (attr *ClassAttr) Pt1_5() *ClassAttr {
	attr.classes = append(attr.classes, "pt-1.5")
	return attr
}

func Pt1_5() *ClassAttr {
	return newClassAttr().Pt1_5()
}

func (attr *ClassAttr) Pt1_75() *ClassAttr {
	attr.classes = append(attr.classes, "pt-1.75")
	return attr
}

func Pt1_75() *ClassAttr {
	return newClassAttr().Pt1_75()
}

func (attr *ClassAttr) Pt2() *ClassAttr {
	attr.classes = append(attr.classes, "pt-2")
	return attr
}

func Pt2() *ClassAttr {
	return newClassAttr().Pt2()
}

func (attr *ClassAttr) Pt3() *ClassAttr {
	attr.classes = append(attr.classes, "pt-3")
	return attr
}

func Pt3() *ClassAttr {
	return newClassAttr().Pt3()
}

func (attr *ClassAttr) Pt4() *ClassAttr {
	attr.classes = append(attr.classes, "pt-4")
	return attr
}

func Pt4() *ClassAttr {
	return newClassAttr().Pt4()
}

func (attr *ClassAttr) Px_125() *ClassAttr {
	attr.classes = append(attr.classes, "px-.125")
	return attr
}

func Px_125() *ClassAttr {
	return newClassAttr().Px_125()
}

func (attr *ClassAttr) Px_25() *ClassAttr {
	attr.classes = append(attr.classes, "px-.25")
	return attr
}

func Px_25() *ClassAttr {
	return newClassAttr().Px_25()
}

func (attr *ClassAttr) Px_5() *ClassAttr {
	attr.classes = append(attr.classes, "px-.5")
	return attr
}

func Px_5() *ClassAttr {
	return newClassAttr().Px_5()
}

func (attr *ClassAttr) Px_75() *ClassAttr {
	attr.classes = append(attr.classes, "px-.75")
	return attr
}

func Px_75() *ClassAttr {
	return newClassAttr().Px_75()
}

func (attr *ClassAttr) Px0() *ClassAttr {
	attr.classes = append(attr.classes, "px-0")
	return attr
}

func Px0() *ClassAttr {
	return newClassAttr().Px0()
}

func (attr *ClassAttr) Px1() *ClassAttr {
	attr.classes = append(attr.classes, "px-1")
	return attr
}

func Px1() *ClassAttr {
	return newClassAttr().Px1()
}

func (attr *ClassAttr) Px1_25() *ClassAttr {
	attr.classes = append(attr.classes, "px-1.25")
	return attr
}

func Px1_25() *ClassAttr {
	return newClassAttr().Px1_25()
}

func (attr *ClassAttr) Px1_5() *ClassAttr {
	attr.classes = append(attr.classes, "px-1.5")
	return attr
}

func Px1_5() *ClassAttr {
	return newClassAttr().Px1_5()
}

func (attr *ClassAttr) Px1_75() *ClassAttr {
	attr.classes = append(attr.classes, "px-1.75")
	return attr
}

func Px1_75() *ClassAttr {
	return newClassAttr().Px1_75()
}

func (attr *ClassAttr) Px2() *ClassAttr {
	attr.classes = append(attr.classes, "px-2")
	return attr
}

func Px2() *ClassAttr {
	return newClassAttr().Px2()
}

func (attr *ClassAttr) Px3() *ClassAttr {
	attr.classes = append(attr.classes, "px-3")
	return attr
}

func Px3() *ClassAttr {
	return newClassAttr().Px3()
}

func (attr *ClassAttr) Px4() *ClassAttr {
	attr.classes = append(attr.classes, "px-4")
	return attr
}

func Px4() *ClassAttr {
	return newClassAttr().Px4()
}

func (attr *ClassAttr) Py_125() *ClassAttr {
	attr.classes = append(attr.classes, "py-.125")
	return attr
}

func Py_125() *ClassAttr {
	return newClassAttr().Py_125()
}

func (attr *ClassAttr) Py_25() *ClassAttr {
	attr.classes = append(attr.classes, "py-.25")
	return attr
}

func Py_25() *ClassAttr {
	return newClassAttr().Py_25()
}

func (attr *ClassAttr) Py_5() *ClassAttr {
	attr.classes = append(attr.classes, "py-.5")
	return attr
}

func Py_5() *ClassAttr {
	return newClassAttr().Py_5()
}

func (attr *ClassAttr) Py_75() *ClassAttr {
	attr.classes = append(attr.classes, "py-.75")
	return attr
}

func Py_75() *ClassAttr {
	return newClassAttr().Py_75()
}

func (attr *ClassAttr) Py0() *ClassAttr {
	attr.classes = append(attr.classes, "py-0")
	return attr
}

func Py0() *ClassAttr {
	return newClassAttr().Py0()
}

func (attr *ClassAttr) Py1() *ClassAttr {
	attr.classes = append(attr.classes, "py-1")
	return attr
}

func Py1() *ClassAttr {
	return newClassAttr().Py1()
}

func (attr *ClassAttr) Py1_25() *ClassAttr {
	attr.classes = append(attr.classes, "py-1.25")
	return attr
}

func Py1_25() *ClassAttr {
	return newClassAttr().Py1_25()
}

func (attr *ClassAttr) Py1_5() *ClassAttr {
	attr.classes = append(attr.classes, "py-1.5")
	return attr
}

func Py1_5() *ClassAttr {
	return newClassAttr().Py1_5()
}

func (attr *ClassAttr) Py1_75() *ClassAttr {
	attr.classes = append(attr.classes, "py-1.75")
	return attr
}

func Py1_75() *ClassAttr {
	return newClassAttr().Py1_75()
}

func (attr *ClassAttr) Py2() *ClassAttr {
	attr.classes = append(attr.classes, "py-2")
	return attr
}

func Py2() *ClassAttr {
	return newClassAttr().Py2()
}

func (attr *ClassAttr) Py3() *ClassAttr {
	attr.classes = append(attr.classes, "py-3")
	return attr
}

func Py3() *ClassAttr {
	return newClassAttr().Py3()
}

func (attr *ClassAttr) Py4() *ClassAttr {
	attr.classes = append(attr.classes, "py-4")
	return attr
}

func Py4() *ClassAttr {
	return newClassAttr().Py4()
}

func (attr *ClassAttr) Relative() *ClassAttr {
	attr.classes = append(attr.classes, "relative")
	return attr
}

func Relative() *ClassAttr {
	return newClassAttr().Relative()
}

func (attr *ClassAttr) Resize() *ClassAttr {
	attr.classes = append(attr.classes, "resize")
	return attr
}

func Resize() *ClassAttr {
	return newClassAttr().Resize()
}

func (attr *ClassAttr) ResizeX() *ClassAttr {
	attr.classes = append(attr.classes, "resize-x")
	return attr
}

func ResizeX() *ClassAttr {
	return newClassAttr().ResizeX()
}

func (attr *ClassAttr) ResizeY() *ClassAttr {
	attr.classes = append(attr.classes, "resize-y")
	return attr
}

func ResizeY() *ClassAttr {
	return newClassAttr().ResizeY()
}

func (attr *ClassAttr) Reverse() *ClassAttr {
	attr.classes = append(attr.classes, "reverse")
	return attr
}

func Reverse() *ClassAttr {
	return newClassAttr().Reverse()
}

func (attr *ClassAttr) Rounded() *ClassAttr {
	attr.classes = append(attr.classes, "rounded")
	return attr
}

func Rounded() *ClassAttr {
	return newClassAttr().Rounded()
}

func (attr *ClassAttr) Row() *ClassAttr {
	attr.classes = append(attr.classes, "row")
	return attr
}

func Row() *ClassAttr {
	return newClassAttr().Row()
}

func (attr *ClassAttr) SelectAll() *ClassAttr {
	attr.classes = append(attr.classes, "select-all")
	return attr
}

func SelectAll() *ClassAttr {
	return newClassAttr().SelectAll()
}

func (attr *ClassAttr) Selected() *ClassAttr {
	attr.classes = append(attr.classes, "selected")
	return attr
}

func Selected() *ClassAttr {
	return newClassAttr().Selected()
}

func (attr *ClassAttr) Semibold() *ClassAttr {
	attr.classes = append(attr.classes, "semibold")
	return attr
}

func Semibold() *ClassAttr {
	return newClassAttr().Semibold()
}

func (attr *ClassAttr) Severe() *ClassAttr {
	attr.classes = append(attr.classes, "severe")
	return attr
}

func Severe() *ClassAttr {
	return newClassAttr().Severe()
}

func (attr *ClassAttr) Shadow() *ClassAttr {
	attr.classes = append(attr.classes, "shadow")
	return attr
}

func Shadow() *ClassAttr {
	return newClassAttr().Shadow()
}

func (attr *ClassAttr) Shrink() *ClassAttr {
	attr.classes = append(attr.classes, "shrink")
	return attr
}

func Shrink() *ClassAttr {
	return newClassAttr().Shrink()
}

func (attr *ClassAttr) Small() *ClassAttr {
	attr.classes = append(attr.classes, "small")
	return attr
}

func Small() *ClassAttr {
	return newClassAttr().Small()
}

func (attr *ClassAttr) Smaller() *ClassAttr {
	attr.classes = append(attr.classes, "smaller")
	return attr
}

func Smaller() *ClassAttr {
	return newClassAttr().Smaller()
}

func (attr *ClassAttr) SpaceAround() *ClassAttr {
	attr.classes = append(attr.classes, "space-around")
	return attr
}

func SpaceAround() *ClassAttr {
	return newClassAttr().SpaceAround()
}

func (attr *ClassAttr) SpaceBetween() *ClassAttr {
	attr.classes = append(attr.classes, "space-between")
	return attr
}

func SpaceBetween() *ClassAttr {
	return newClassAttr().SpaceBetween()
}

func (attr *ClassAttr) SpaceEvenly() *ClassAttr {
	attr.classes = append(attr.classes, "space-evenly")
	return attr
}

func SpaceEvenly() *ClassAttr {
	return newClassAttr().SpaceEvenly()
}

func (attr *ClassAttr) SpacingX_125() *ClassAttr {
	attr.classes = append(attr.classes, "spacing-x-.125")
	return attr
}

func SpacingX_125() *ClassAttr {
	return newClassAttr().SpacingX_125()
}

func (attr *ClassAttr) SpacingX_25() *ClassAttr {
	attr.classes = append(attr.classes, "spacing-x-.25")
	return attr
}

func SpacingX_25() *ClassAttr {
	return newClassAttr().SpacingX_25()
}

func (attr *ClassAttr) SpacingX_5() *ClassAttr {
	attr.classes = append(attr.classes, "spacing-x-.5")
	return attr
}

func SpacingX_5() *ClassAttr {
	return newClassAttr().SpacingX_5()
}

func (attr *ClassAttr) SpacingX_75() *ClassAttr {
	attr.classes = append(attr.classes, "spacing-x-.75")
	return attr
}

func SpacingX_75() *ClassAttr {
	return newClassAttr().SpacingX_75()
}

func (attr *ClassAttr) SpacingX0() *ClassAttr {
	attr.classes = append(attr.classes, "spacing-x-0")
	return attr
}

func SpacingX0() *ClassAttr {
	return newClassAttr().SpacingX0()
}

func (attr *ClassAttr) SpacingX1() *ClassAttr {
	attr.classes = append(attr.classes, "spacing-x-1")
	return attr
}

func SpacingX1() *ClassAttr {
	return newClassAttr().SpacingX1()
}

func (attr *ClassAttr) SpacingX1_25() *ClassAttr {
	attr.classes = append(attr.classes, "spacing-x-1.25")
	return attr
}

func SpacingX1_25() *ClassAttr {
	return newClassAttr().SpacingX1_25()
}

func (attr *ClassAttr) SpacingX1_5() *ClassAttr {
	attr.classes = append(attr.classes, "spacing-x-1.5")
	return attr
}

func SpacingX1_5() *ClassAttr {
	return newClassAttr().SpacingX1_5()
}

func (attr *ClassAttr) SpacingX1_75() *ClassAttr {
	attr.classes = append(attr.classes, "spacing-x-1.75")
	return attr
}

func SpacingX1_75() *ClassAttr {
	return newClassAttr().SpacingX1_75()
}

func (attr *ClassAttr) SpacingX2() *ClassAttr {
	attr.classes = append(attr.classes, "spacing-x-2")
	return attr
}

func SpacingX2() *ClassAttr {
	return newClassAttr().SpacingX2()
}

func (attr *ClassAttr) SpacingX3() *ClassAttr {
	attr.classes = append(attr.classes, "spacing-x-3")
	return attr
}

func SpacingX3() *ClassAttr {
	return newClassAttr().SpacingX3()
}

func (attr *ClassAttr) SpacingX4() *ClassAttr {
	attr.classes = append(attr.classes, "spacing-x-4")
	return attr
}

func SpacingX4() *ClassAttr {
	return newClassAttr().SpacingX4()
}

func (attr *ClassAttr) SpacingY_125() *ClassAttr {
	attr.classes = append(attr.classes, "spacing-y-.125")
	return attr
}

func SpacingY_125() *ClassAttr {
	return newClassAttr().SpacingY_125()
}

func (attr *ClassAttr) SpacingY_25() *ClassAttr {
	attr.classes = append(attr.classes, "spacing-y-.25")
	return attr
}

func SpacingY_25() *ClassAttr {
	return newClassAttr().SpacingY_25()
}

func (attr *ClassAttr) SpacingY_5() *ClassAttr {
	attr.classes = append(attr.classes, "spacing-y-.5")
	return attr
}

func SpacingY_5() *ClassAttr {
	return newClassAttr().SpacingY_5()
}

func (attr *ClassAttr) SpacingY_75() *ClassAttr {
	attr.classes = append(attr.classes, "spacing-y-.75")
	return attr
}

func SpacingY_75() *ClassAttr {
	return newClassAttr().SpacingY_75()
}

func (attr *ClassAttr) SpacingY0() *ClassAttr {
	attr.classes = append(attr.classes, "spacing-y-0")
	return attr
}

func SpacingY0() *ClassAttr {
	return newClassAttr().SpacingY0()
}

func (attr *ClassAttr) SpacingY1() *ClassAttr {
	attr.classes = append(attr.classes, "spacing-y-1")
	return attr
}

func SpacingY1() *ClassAttr {
	return newClassAttr().SpacingY1()
}

func (attr *ClassAttr) SpacingY1_25() *ClassAttr {
	attr.classes = append(attr.classes, "spacing-y-1.25")
	return attr
}

func SpacingY1_25() *ClassAttr {
	return newClassAttr().SpacingY1_25()
}

func (attr *ClassAttr) SpacingY1_5() *ClassAttr {
	attr.classes = append(attr.classes, "spacing-y-1.5")
	return attr
}

func SpacingY1_5() *ClassAttr {
	return newClassAttr().SpacingY1_5()
}

func (attr *ClassAttr) SpacingY1_75() *ClassAttr {
	attr.classes = append(attr.classes, "spacing-y-1.75")
	return attr
}

func SpacingY1_75() *ClassAttr {
	return newClassAttr().SpacingY1_75()
}

func (attr *ClassAttr) SpacingY2() *ClassAttr {
	attr.classes = append(attr.classes, "spacing-y-2")
	return attr
}

func SpacingY2() *ClassAttr {
	return newClassAttr().SpacingY2()
}

func (attr *ClassAttr) SpacingY3() *ClassAttr {
	attr.classes = append(attr.classes, "spacing-y-3")
	return attr
}

func SpacingY3() *ClassAttr {
	return newClassAttr().SpacingY3()
}

func (attr *ClassAttr) SpacingY4() *ClassAttr {
	attr.classes = append(attr.classes, "spacing-y-4")
	return attr
}

func SpacingY4() *ClassAttr {
	return newClassAttr().SpacingY4()
}

func (attr *ClassAttr) Start() *ClassAttr {
	attr.classes = append(attr.classes, "start")
	return attr
}

func Start() *ClassAttr {
	return newClassAttr().Start()
}

func (attr *ClassAttr) Sticky() *ClassAttr {
	attr.classes = append(attr.classes, "sticky")
	return attr
}

func Sticky() *ClassAttr {
	return newClassAttr().Sticky()
}

func (attr *ClassAttr) Stretch() *ClassAttr {
	attr.classes = append(attr.classes, "stretch")
	return attr
}

func Stretch() *ClassAttr {
	return newClassAttr().Stretch()
}

func (attr *ClassAttr) Strikethrough() *ClassAttr {
	attr.classes = append(attr.classes, "strikethrough")
	return attr
}

func Strikethrough() *ClassAttr {
	return newClassAttr().Strikethrough()
}

func (attr *ClassAttr) StrokeCurrent() *ClassAttr {
	attr.classes = append(attr.classes, "stroke-current")
	return attr
}

func StrokeCurrent() *ClassAttr {
	return newClassAttr().StrokeCurrent()
}

func (attr *ClassAttr) Success() *ClassAttr {
	attr.classes = append(attr.classes, "success")
	return attr
}

func Success() *ClassAttr {
	return newClassAttr().Success()
}

func (attr *ClassAttr) TableResponsive() *ClassAttr {
	attr.classes = append(attr.classes, "table-responsive")
	return attr
}

func TableResponsive() *ClassAttr {
	return newClassAttr().TableResponsive()
}

func (attr *ClassAttr) Underline() *ClassAttr {
	attr.classes = append(attr.classes, "underline")
	return attr
}

func Underline() *ClassAttr {
	return newClassAttr().Underline()
}

func (attr *ClassAttr) Uppercase() *ClassAttr {
	attr.classes = append(attr.classes, "uppercase")
	return attr
}

func Uppercase() *ClassAttr {
	return newClassAttr().Uppercase()
}

func (attr *ClassAttr) Variant() *ClassAttr {
	attr.classes = append(attr.classes, "variant")
	return attr
}

func Variant() *ClassAttr {
	return newClassAttr().Variant()
}

func (attr *ClassAttr) Wait() *ClassAttr {
	attr.classes = append(attr.classes, "wait")
	return attr
}

func Wait() *ClassAttr {
	return newClassAttr().Wait()
}

func (attr *ClassAttr) Width() *ClassAttr {
	attr.classes = append(attr.classes, "width")
	return attr
}

func Width() *ClassAttr {
	return newClassAttr().Width()
}

func (attr *ClassAttr) Wrap() *ClassAttr {
	attr.classes = append(attr.classes, "wrap")
	return attr
}

func Wrap() *ClassAttr {
	return newClassAttr().Wrap()
}


